package run.yigou.gxzy.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import run.yigou.gxzy.greendao.entity.TabNavBody;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAB_NAV_BODY".
*/
public class TabNavBodyDao extends AbstractDao<TabNavBody, String> {

    public static final String TABLENAME = "TAB_NAV_BODY";

    /**
     * Properties of entity TabNavBody.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TabNavBodyId = new Property(0, String.class, "tabNavBodyId", true, "TAB_NAV_BODY_ID");
        public final static Property TabNavId = new Property(1, String.class, "tabNavId", false, "TAB_NAV_ID");
        public final static Property Id = new Property(2, Long.class, "Id", false, "ID");
        public final static Property BookNo = new Property(3, int.class, "bookNo", false, "BOOK_NO");
        public final static Property ImageUrl = new Property(4, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property BookName = new Property(5, String.class, "bookName", false, "BOOK_NAME");
        public final static Property ChengShu = new Property(6, String.class, "chengShu", false, "CHENG_SHU");
        public final static Property Author = new Property(7, String.class, "author", false, "AUTHOR");
        public final static Property Desc = new Property(8, String.class, "desc", false, "DESC");
    }

    private Query<TabNavBody> tabNav_NavListQuery;

    public TabNavBodyDao(DaoConfig config) {
        super(config);
    }
    
    public TabNavBodyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAB_NAV_BODY\" (" + //
                "\"TAB_NAV_BODY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: tabNavBodyId
                "\"TAB_NAV_ID\" TEXT," + // 1: tabNavId
                "\"ID\" INTEGER," + // 2: Id
                "\"BOOK_NO\" INTEGER NOT NULL ," + // 3: bookNo
                "\"IMAGE_URL\" TEXT," + // 4: imageUrl
                "\"BOOK_NAME\" TEXT," + // 5: bookName
                "\"CHENG_SHU\" TEXT," + // 6: chengShu
                "\"AUTHOR\" TEXT," + // 7: author
                "\"DESC\" TEXT);"); // 8: desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAB_NAV_BODY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TabNavBody entity) {
        stmt.clearBindings();
 
        String tabNavBodyId = entity.getTabNavBodyId();
        if (tabNavBodyId != null) {
            stmt.bindString(1, tabNavBodyId);
        }
 
        String tabNavId = entity.getTabNavId();
        if (tabNavId != null) {
            stmt.bindString(2, tabNavId);
        }
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(3, Id);
        }
        stmt.bindLong(4, entity.getBookNo());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(6, bookName);
        }
 
        String chengShu = entity.getChengShu();
        if (chengShu != null) {
            stmt.bindString(7, chengShu);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TabNavBody entity) {
        stmt.clearBindings();
 
        String tabNavBodyId = entity.getTabNavBodyId();
        if (tabNavBodyId != null) {
            stmt.bindString(1, tabNavBodyId);
        }
 
        String tabNavId = entity.getTabNavId();
        if (tabNavId != null) {
            stmt.bindString(2, tabNavId);
        }
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(3, Id);
        }
        stmt.bindLong(4, entity.getBookNo());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(6, bookName);
        }
 
        String chengShu = entity.getChengShu();
        if (chengShu != null) {
            stmt.bindString(7, chengShu);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(9, desc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TabNavBody readEntity(Cursor cursor, int offset) {
        TabNavBody entity = new TabNavBody( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tabNavBodyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tabNavId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // Id
            cursor.getInt(offset + 3), // bookNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chengShu
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // author
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TabNavBody entity, int offset) {
        entity.setTabNavBodyId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTabNavId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBookNo(cursor.getInt(offset + 3));
        entity.setImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChengShu(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDesc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TabNavBody entity, long rowId) {
        return entity.getTabNavBodyId();
    }
    
    @Override
    public String getKey(TabNavBody entity) {
        if(entity != null) {
            return entity.getTabNavBodyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TabNavBody entity) {
        return entity.getTabNavBodyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "navList" to-many relationship of TabNav. */
    public List<TabNavBody> _queryTabNav_NavList(String tabNavId) {
        synchronized (this) {
            if (tabNav_NavListQuery == null) {
                QueryBuilder<TabNavBody> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TabNavId.eq(null));
                tabNav_NavListQuery = queryBuilder.build();
            }
        }
        Query<TabNavBody> query = tabNav_NavListQuery.forCurrentThread();
        query.setParameter(0, tabNavId);
        return query.list();
    }

}
