package run.yigou.gxzy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import run.yigou.gxzy.greendao.entity.YaoFang;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "YAO_FANG".
*/
public class YaoFangDao extends AbstractDao<YaoFang, String> {

    public static final String TABLENAME = "YAO_FANG";

    /**
     * Properties of entity YaoFang.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property YaoFangID = new Property(0, String.class, "yaoFangID", true, "YAO_FANG_ID");
        public final static Property BookId = new Property(1, int.class, "bookId", false, "BOOK_ID");
        public final static Property YaoCount = new Property(2, int.class, "yaoCount", false, "YAO_COUNT");
        public final static Property Height = new Property(3, int.class, "height", false, "HEIGHT");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property ID = new Property(5, int.class, "ID", false, "ID");
        public final static Property DrinkNum = new Property(6, float.class, "drinkNum", false, "DRINK_NUM");
        public final static Property Text = new Property(7, String.class, "text", false, "TEXT");
        public final static Property FangList = new Property(8, String.class, "fangList", false, "FANG_LIST");
        public final static Property YaoList = new Property(9, String.class, "yaoList", false, "YAO_LIST");
        public final static Property SignatureId = new Property(10, long.class, "signatureId", false, "SIGNATURE_ID");
        public final static Property Signature = new Property(11, String.class, "signature", false, "SIGNATURE");
    }

    private DaoSession daoSession;


    public YaoFangDao(DaoConfig config) {
        super(config);
    }
    
    public YaoFangDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"YAO_FANG\" (" + //
                "\"YAO_FANG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: yaoFangID
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 1: bookId
                "\"YAO_COUNT\" INTEGER NOT NULL ," + // 2: yaoCount
                "\"HEIGHT\" INTEGER NOT NULL ," + // 3: height
                "\"NAME\" TEXT," + // 4: name
                "\"ID\" INTEGER NOT NULL ," + // 5: ID
                "\"DRINK_NUM\" REAL NOT NULL ," + // 6: drinkNum
                "\"TEXT\" TEXT," + // 7: text
                "\"FANG_LIST\" TEXT," + // 8: fangList
                "\"YAO_LIST\" TEXT," + // 9: yaoList
                "\"SIGNATURE_ID\" INTEGER NOT NULL ," + // 10: signatureId
                "\"SIGNATURE\" TEXT);"); // 11: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"YAO_FANG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, YaoFang entity) {
        stmt.clearBindings();
 
        String yaoFangID = entity.getYaoFangID();
        if (yaoFangID != null) {
            stmt.bindString(1, yaoFangID);
        }
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getYaoCount());
        stmt.bindLong(4, entity.getHeight());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getID());
        stmt.bindDouble(7, entity.getDrinkNum());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(8, text);
        }
 
        String fangList = entity.getFangList();
        if (fangList != null) {
            stmt.bindString(9, fangList);
        }
 
        String yaoList = entity.getYaoList();
        if (yaoList != null) {
            stmt.bindString(10, yaoList);
        }
        stmt.bindLong(11, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(12, signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, YaoFang entity) {
        stmt.clearBindings();
 
        String yaoFangID = entity.getYaoFangID();
        if (yaoFangID != null) {
            stmt.bindString(1, yaoFangID);
        }
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getYaoCount());
        stmt.bindLong(4, entity.getHeight());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getID());
        stmt.bindDouble(7, entity.getDrinkNum());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(8, text);
        }
 
        String fangList = entity.getFangList();
        if (fangList != null) {
            stmt.bindString(9, fangList);
        }
 
        String yaoList = entity.getYaoList();
        if (yaoList != null) {
            stmt.bindString(10, yaoList);
        }
        stmt.bindLong(11, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(12, signature);
        }
    }

    @Override
    protected final void attachEntity(YaoFang entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public YaoFang readEntity(Cursor cursor, int offset) {
        YaoFang entity = new YaoFang( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // yaoFangID
            cursor.getInt(offset + 1), // bookId
            cursor.getInt(offset + 2), // yaoCount
            cursor.getInt(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // ID
            cursor.getFloat(offset + 6), // drinkNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // text
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fangList
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // yaoList
            cursor.getLong(offset + 10), // signatureId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, YaoFang entity, int offset) {
        entity.setYaoFangID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookId(cursor.getInt(offset + 1));
        entity.setYaoCount(cursor.getInt(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setID(cursor.getInt(offset + 5));
        entity.setDrinkNum(cursor.getFloat(offset + 6));
        entity.setText(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFangList(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setYaoList(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSignatureId(cursor.getLong(offset + 10));
        entity.setSignature(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(YaoFang entity, long rowId) {
        return entity.getYaoFangID();
    }
    
    @Override
    public String getKey(YaoFang entity) {
        if(entity != null) {
            return entity.getYaoFangID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(YaoFang entity) {
        return entity.getYaoFangID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
