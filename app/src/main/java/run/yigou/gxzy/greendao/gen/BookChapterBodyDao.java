package run.yigou.gxzy.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import run.yigou.gxzy.greendao.entity.BookChapterBody;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_CHAPTER_BODY".
*/
public class BookChapterBodyDao extends AbstractDao<BookChapterBody, Void> {

    public static final String TABLENAME = "BOOK_CHAPTER_BODY";

    /**
     * Properties of entity BookChapterBody.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookChapterBodyId = new Property(0, String.class, "bookChapterBodyId", false, "BOOK_CHAPTER_BODY_ID");
        public final static Property BookChapterId = new Property(1, String.class, "bookChapterId", false, "BOOK_CHAPTER_ID");
        public final static Property ID = new Property(2, int.class, "ID", false, "ID");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Note = new Property(4, String.class, "note", false, "NOTE");
        public final static Property Sectionvideo = new Property(5, String.class, "sectionvideo", false, "SECTIONVIDEO");
        public final static Property Height = new Property(6, int.class, "height", false, "HEIGHT");
        public final static Property FangList = new Property(7, String.class, "fangList", false, "FANG_LIST");
        public final static Property SignatureId = new Property(8, long.class, "signatureId", false, "SIGNATURE_ID");
        public final static Property Signature = new Property(9, String.class, "signature", false, "SIGNATURE");
    }

    private Query<BookChapterBody> bookChapter_DataQuery;

    public BookChapterBodyDao(DaoConfig config) {
        super(config);
    }
    
    public BookChapterBodyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_CHAPTER_BODY\" (" + //
                "\"BOOK_CHAPTER_BODY_ID\" TEXT," + // 0: bookChapterBodyId
                "\"BOOK_CHAPTER_ID\" TEXT," + // 1: bookChapterId
                "\"ID\" INTEGER NOT NULL ," + // 2: ID
                "\"TEXT\" TEXT," + // 3: text
                "\"NOTE\" TEXT," + // 4: note
                "\"SECTIONVIDEO\" TEXT," + // 5: sectionvideo
                "\"HEIGHT\" INTEGER NOT NULL ," + // 6: height
                "\"FANG_LIST\" TEXT," + // 7: fangList
                "\"SIGNATURE_ID\" INTEGER NOT NULL ," + // 8: signatureId
                "\"SIGNATURE\" TEXT);"); // 9: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_CHAPTER_BODY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookChapterBody entity) {
        stmt.clearBindings();
 
        String bookChapterBodyId = entity.getBookChapterBodyId();
        if (bookChapterBodyId != null) {
            stmt.bindString(1, bookChapterBodyId);
        }
 
        String bookChapterId = entity.getBookChapterId();
        if (bookChapterId != null) {
            stmt.bindString(2, bookChapterId);
        }
        stmt.bindLong(3, entity.getID());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
 
        String sectionvideo = entity.getSectionvideo();
        if (sectionvideo != null) {
            stmt.bindString(6, sectionvideo);
        }
        stmt.bindLong(7, entity.getHeight());
 
        String fangList = entity.getFangList();
        if (fangList != null) {
            stmt.bindString(8, fangList);
        }
        stmt.bindLong(9, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(10, signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookChapterBody entity) {
        stmt.clearBindings();
 
        String bookChapterBodyId = entity.getBookChapterBodyId();
        if (bookChapterBodyId != null) {
            stmt.bindString(1, bookChapterBodyId);
        }
 
        String bookChapterId = entity.getBookChapterId();
        if (bookChapterId != null) {
            stmt.bindString(2, bookChapterId);
        }
        stmt.bindLong(3, entity.getID());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
 
        String sectionvideo = entity.getSectionvideo();
        if (sectionvideo != null) {
            stmt.bindString(6, sectionvideo);
        }
        stmt.bindLong(7, entity.getHeight());
 
        String fangList = entity.getFangList();
        if (fangList != null) {
            stmt.bindString(8, fangList);
        }
        stmt.bindLong(9, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(10, signature);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookChapterBody readEntity(Cursor cursor, int offset) {
        BookChapterBody entity = new BookChapterBody( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookChapterBodyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookChapterId
            cursor.getInt(offset + 2), // ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // note
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sectionvideo
            cursor.getInt(offset + 6), // height
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fangList
            cursor.getLong(offset + 8), // signatureId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookChapterBody entity, int offset) {
        entity.setBookChapterBodyId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookChapterId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setID(cursor.getInt(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSectionvideo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeight(cursor.getInt(offset + 6));
        entity.setFangList(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSignatureId(cursor.getLong(offset + 8));
        entity.setSignature(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookChapterBody entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookChapterBody entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookChapterBody entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of BookChapter. */
    public List<BookChapterBody> _queryBookChapter_Data(String bookChapterId) {
        synchronized (this) {
            if (bookChapter_DataQuery == null) {
                QueryBuilder<BookChapterBody> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookChapterId.eq(null));
                bookChapter_DataQuery = queryBuilder.build();
            }
        }
        Query<BookChapterBody> query = bookChapter_DataQuery.forCurrentThread();
        query.setParameter(0, bookChapterId);
        return query.list();
    }

}
