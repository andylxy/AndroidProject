package run.yigou.gxzy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import run.yigou.gxzy.greendao.entity.BookChapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_CHAPTER".
*/
public class BookChapterDao extends AbstractDao<BookChapter, String> {

    public static final String TABLENAME = "BOOK_CHAPTER";

    /**
     * Properties of entity BookChapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookChapterId = new Property(0, String.class, "bookChapterId", true, "BOOK_CHAPTER_ID");
        public final static Property Section = new Property(1, int.class, "section", false, "SECTION");
        public final static Property BookId = new Property(2, int.class, "bookId", false, "BOOK_ID");
        public final static Property Header = new Property(3, String.class, "header", false, "HEADER");
        public final static Property SignatureId = new Property(4, long.class, "signatureId", false, "SIGNATURE_ID");
        public final static Property Signature = new Property(5, String.class, "signature", false, "SIGNATURE");
    }

    private DaoSession daoSession;


    public BookChapterDao(DaoConfig config) {
        super(config);
    }
    
    public BookChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_CHAPTER\" (" + //
                "\"BOOK_CHAPTER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: bookChapterId
                "\"SECTION\" INTEGER NOT NULL ," + // 1: section
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: bookId
                "\"HEADER\" TEXT," + // 3: header
                "\"SIGNATURE_ID\" INTEGER NOT NULL ," + // 4: signatureId
                "\"SIGNATURE\" TEXT);"); // 5: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookChapter entity) {
        stmt.clearBindings();
 
        String bookChapterId = entity.getBookChapterId();
        if (bookChapterId != null) {
            stmt.bindString(1, bookChapterId);
        }
        stmt.bindLong(2, entity.getSection());
        stmt.bindLong(3, entity.getBookId());
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(4, header);
        }
        stmt.bindLong(5, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookChapter entity) {
        stmt.clearBindings();
 
        String bookChapterId = entity.getBookChapterId();
        if (bookChapterId != null) {
            stmt.bindString(1, bookChapterId);
        }
        stmt.bindLong(2, entity.getSection());
        stmt.bindLong(3, entity.getBookId());
 
        String header = entity.getHeader();
        if (header != null) {
            stmt.bindString(4, header);
        }
        stmt.bindLong(5, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
    }

    @Override
    protected final void attachEntity(BookChapter entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookChapter readEntity(Cursor cursor, int offset) {
        BookChapter entity = new BookChapter( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookChapterId
            cursor.getInt(offset + 1), // section
            cursor.getInt(offset + 2), // bookId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // header
            cursor.getLong(offset + 4), // signatureId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookChapter entity, int offset) {
        entity.setBookChapterId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSection(cursor.getInt(offset + 1));
        entity.setBookId(cursor.getInt(offset + 2));
        entity.setHeader(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignatureId(cursor.getLong(offset + 4));
        entity.setSignature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookChapter entity, long rowId) {
        return entity.getBookChapterId();
    }
    
    @Override
    public String getKey(BookChapter entity) {
        if(entity != null) {
            return entity.getBookChapterId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookChapter entity) {
        return entity.getBookChapterId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
