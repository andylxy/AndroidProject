package run.yigou.gxzy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import run.yigou.gxzy.greendao.entity.BeiMingCi;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEI_MING_CI".
*/
public class BeiMingCiDao extends AbstractDao<BeiMingCi, Long> {

    public static final String TABLENAME = "BEI_MING_CI";

    /**
     * Properties of entity BeiMingCi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BeiMingCiId = new Property(0, Long.class, "beiMingCiId", true, "_id");
        public final static Property ID = new Property(1, int.class, "ID", false, "ID");
        public final static Property MingCiList = new Property(2, String.class, "mingCiList", false, "MING_CI_LIST");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Height = new Property(4, int.class, "height", false, "HEIGHT");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
        public final static Property SignatureId = new Property(6, long.class, "signatureId", false, "SIGNATURE_ID");
        public final static Property Signature = new Property(7, String.class, "signature", false, "SIGNATURE");
    }


    public BeiMingCiDao(DaoConfig config) {
        super(config);
    }
    
    public BeiMingCiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEI_MING_CI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: beiMingCiId
                "\"ID\" INTEGER NOT NULL ," + // 1: ID
                "\"MING_CI_LIST\" TEXT," + // 2: mingCiList
                "\"NAME\" TEXT," + // 3: name
                "\"HEIGHT\" INTEGER NOT NULL ," + // 4: height
                "\"TEXT\" TEXT," + // 5: text
                "\"SIGNATURE_ID\" INTEGER NOT NULL ," + // 6: signatureId
                "\"SIGNATURE\" TEXT);"); // 7: signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEI_MING_CI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeiMingCi entity) {
        stmt.clearBindings();
 
        Long beiMingCiId = entity.getBeiMingCiId();
        if (beiMingCiId != null) {
            stmt.bindLong(1, beiMingCiId);
        }
        stmt.bindLong(2, entity.getID());
 
        String mingCiList = entity.getMingCiList();
        if (mingCiList != null) {
            stmt.bindString(3, mingCiList);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getHeight());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
        stmt.bindLong(7, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(8, signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeiMingCi entity) {
        stmt.clearBindings();
 
        Long beiMingCiId = entity.getBeiMingCiId();
        if (beiMingCiId != null) {
            stmt.bindLong(1, beiMingCiId);
        }
        stmt.bindLong(2, entity.getID());
 
        String mingCiList = entity.getMingCiList();
        if (mingCiList != null) {
            stmt.bindString(3, mingCiList);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getHeight());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
        stmt.bindLong(7, entity.getSignatureId());
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(8, signature);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BeiMingCi readEntity(Cursor cursor, int offset) {
        BeiMingCi entity = new BeiMingCi( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // beiMingCiId
            cursor.getInt(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mingCiList
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // height
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // text
            cursor.getLong(offset + 6), // signatureId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeiMingCi entity, int offset) {
        entity.setBeiMingCiId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.getInt(offset + 1));
        entity.setMingCiList(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeight(cursor.getInt(offset + 4));
        entity.setText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSignatureId(cursor.getLong(offset + 6));
        entity.setSignature(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BeiMingCi entity, long rowId) {
        entity.setBeiMingCiId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BeiMingCi entity) {
        if(entity != null) {
            return entity.getBeiMingCiId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BeiMingCi entity) {
        return entity.getBeiMingCiId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
