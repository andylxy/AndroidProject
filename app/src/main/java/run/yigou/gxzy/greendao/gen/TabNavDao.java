package run.yigou.gxzy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import run.yigou.gxzy.greendao.entity.TabNav;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAB_NAV".
*/
public class TabNavDao extends AbstractDao<TabNav, String> {

    public static final String TABLENAME = "TAB_NAV";

    /**
     * Properties of entity TabNav.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TabNavId = new Property(0, String.class, "tabNavId", true, "TAB_NAV_ID");
        public final static Property CaseId = new Property(1, int.class, "caseId", false, "CASE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    }

    private DaoSession daoSession;


    public TabNavDao(DaoConfig config) {
        super(config);
    }
    
    public TabNavDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAB_NAV\" (" + //
                "\"TAB_NAV_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: tabNavId
                "\"CASE_ID\" INTEGER NOT NULL ," + // 1: caseId
                "\"NAME\" TEXT);"); // 2: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAB_NAV\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TabNav entity) {
        stmt.clearBindings();
 
        String tabNavId = entity.getTabNavId();
        if (tabNavId != null) {
            stmt.bindString(1, tabNavId);
        }
        stmt.bindLong(2, entity.getCaseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TabNav entity) {
        stmt.clearBindings();
 
        String tabNavId = entity.getTabNavId();
        if (tabNavId != null) {
            stmt.bindString(1, tabNavId);
        }
        stmt.bindLong(2, entity.getCaseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    protected final void attachEntity(TabNav entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TabNav readEntity(Cursor cursor, int offset) {
        TabNav entity = new TabNav( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tabNavId
            cursor.getInt(offset + 1), // caseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TabNav entity, int offset) {
        entity.setTabNavId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCaseId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TabNav entity, long rowId) {
        return entity.getTabNavId();
    }
    
    @Override
    public String getKey(TabNav entity) {
        if(entity != null) {
            return entity.getTabNavId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TabNav entity) {
        return entity.getTabNavId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
